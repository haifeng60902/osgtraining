Import('env')

encoder_sources = """
	apiwrapper.c
	fragment.c
	idct.c
	internal.c
	state.c
	quant.c
	analyze.c
	encfrag.c
	encapiwrapper.c
	encinfo.c
	encode.c
	enquant.c
	fdct.c
	huffenc.c
	mathops.c
	mcenc.c
	rate.c
	tokenize.c
"""

decoder_sources = """
        apiwrapper.c
	bitpack.c
        decapiwrapper.c
        decinfo.c
        decode.c
        dequant.c
        fragment.c
        huffdec.c
        idct.c
        info.c
        internal.c
        quant.c
        state.c
"""


CPPDEFINES = ['LIBTHEORA_EXPORTS']
if env['ARCHITECTURE'] == 'x86':
  CPPDEFINES += ['OC_X86_ASM']
  decoder_sources += """
        x86_vc/mmxidct.c
        x86_vc/mmxfrag.c
        x86_vc/mmxstate.c
        x86_vc/x86state.c
  """
  encoder_sources += """
	x86_vc/mmxencfrag.c
	x86_vc/mmxfdct.c
	x86_vc/x86enc.c
	x86_vc/mmxfrag.c
	x86_vc/mmxidct.c
	x86_vc/mmxstate.c
	x86_vc/x86state.c
  """

def mk_src(lst):
    res = []
    for i in lst.split():
        o = 'lib/' + i
        if o in res: continue
        res.append(o)
    return res

env.edSharedLibrary(
    target = 'theora',

#    source = map(lambda x: 'lib/' + x, encoder_sources.split() + decoder_sources.split()) + ['win32/theora.def'],
    source = mk_src(encoder_sources + decoder_sources) + ['win32/theora.def'],

    CPPPATH = ['include', 'lib'],
	header = [], 

    CPPDEFINES = CPPDEFINES,

    LIBS = ['ogg'],
)
